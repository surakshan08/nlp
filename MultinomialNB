pip install nltk scikit-learn

import nltk
from nltk.corpus import movie_reviews
import random
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.pipeline import Pipeline
from sklearn.metrics import accuracy_score, classification_report

# Download necessary NLTK data files
nltk.download('movie_reviews')
nltk.download('punkt')

# Load movie reviews dataset
documents = [(list(movie_reviews.words(fileid)), category)
             for category in movie_reviews.categories()
             for fileid in movie_reviews.fileids(category)]

random.shuffle(documents)

# Separate documents and labels
texts = [" ".join(document) for document, category in documents]
labels = [category for document, category in documents]

# Split data into training and test sets
texts_train, texts_test, labels_train, labels_test = train_test_split(texts, labels, test_size=0.2, random_state=42)

# Create a pipeline with a TfidfVectorizer and a MultinomialNB classifier
pipeline = Pipeline([
    ('tfidf', TfidfVectorizer()),
    ('classifier', MultinomialNB())
])

# Train the model
pipeline.fit(texts_train, labels_train)


# Make predictions
labels_pred = pipeline.predict(texts_test)

# Calculate accuracy
accuracy = accuracy_score(labels_test, labels_pred)
print(f'Accuracy: {accuracy * 100:.2f}%')

# Print detailed classification report
print(classification_report(labels_test, labels_pred))

new_text = "I absolutely loved this movie! The acting was superb and the plot was thrilling."
new_text_transformed = pipeline['tfidf'].transform([new_text])
predicted_sentiment = pipeline['classifier'].predict(new_text_transformed)
print(f'Sentiment: {predicted_sentiment[0]}')
